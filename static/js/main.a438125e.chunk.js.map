{"version":3,"sources":["component/weather/WeatherCard.js","component/weather/Temp.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","tempInfo","useState","weatherstate","setWeatherState","temp","humidity","pressure","weathermood","name","country","speed","sunset","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","setSearchValue","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a438125e.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\n\r\nconst WeatherCard = ({tempInfo}) => {\r\n    const [weatherstate,setWeatherState] = useState();\r\n    const {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        country,\r\n        speed,\r\n        sunset,\r\n    } = tempInfo;\r\n    useEffect(() => {\r\n        if(weathermood)\r\n        {\r\n            switch (weathermood){\r\n                case \"Clouds\":\r\n                    setWeatherState(\"wi-day-cloudy\");\r\n                break;\r\n                case \"Haze\":\r\n                    setWeatherState(\"wi-fog\");\r\n                break;\r\n                case \"Clear\":\r\n                    setWeatherState(\"wi-day-Sunny\");\r\n                break;\r\n                case \"Mist\":\r\n                    setWeatherState(\"wi-dust\");\r\n                break;\r\n\r\n                default:\r\n                    setWeatherState(\"wi-day-Sunny\");\r\n                    break;\r\n            }\r\n        }\r\n    }, [weathermood])\r\n    //converting seconds into time\r\n    let sec = sunset;\r\n    let date = new Date(sec*1000);\r\n    let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n    return (\r\n        <>\r\n            <article className=\"widget\">\r\n            <div className=\"weatherIcon\">\r\n                <i className={`wi ${weatherstate}`}></i>\r\n            </div>\r\n            <div className=\"weatherInfo\">\r\n                <div className=\"temperature\">\r\n                    <span>{temp}&deg;</span>\r\n                </div>\r\n                <div className=\"description\">\r\n                    <div className=\"weatherCondition\">{weathermood}</div>\r\n                    <div className=\"place\">{name},{country}</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"date\">\r\n                {new Date().toLocaleString()}\r\n            </div>\r\n            {/* our 4 coloum section */}\r\n            <div className=\"extra-temp\">\r\n                <div className=\"temp-info-minmax\">\r\n                    <div className=\"two-sided-section\">\r\n                        <p><i className=\"wi wi-sunset\"></i></p>\r\n                        <p className=\"extra-info-leftside\">{timeStr} <br/> sunset</p>\r\n                    </div>\r\n                    <div className=\"two-sided-section\">\r\n                        <p><i className=\"wi wi-humidity\"></i></p>\r\n                        <p className=\"extra-info-leftside\">{humidity} <br/> humidity</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"weather-extra-info\">\r\n                    <div className=\"two-sided-section\">\r\n                        <p><i className=\"wi wi-rain\"></i></p>\r\n                        <p className=\"extra-info-leftside\">{pressure}<br/> pressure</p>\r\n                    </div>\r\n                    <div className=\"two-sided-section\">\r\n                        <p><i className=\"wi wi-strong-wind\"></i></p>\r\n                        <p className=\"extra-info-leftside\"> {speed} <br/>speed</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React ,{useState,useEffect}from 'react'\r\nimport WeatherCard from './WeatherCard';\r\nimport './style.css';\r\n\r\nconst Temp = () => {\r\n    const [searchValue,setSearchValue] = useState(\"bhopal\");\r\n    const [tempInfo,setTempInfo] = useState({});\r\n    const getWeatherInfo = async () =>{\r\n        try{\r\n            let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=18182e215847a2ee36e1d53f1650a9fd`;\r\n            const res = await fetch(url);\r\n            const data = await res.json();\r\n            \r\n            const { temp, humidity, pressure } = data.main;\r\n            const {main:weathermood} = data.weather[0];\r\n            const {name} = data;\r\n            const {speed} = data.wind;\r\n            const {country,sunset} = data.sys;\r\n            \r\n            const myNewWeatherInfo = {\r\n                temp,\r\n                humidity,\r\n                pressure,\r\n                weathermood,\r\n                name,\r\n                country,\r\n                speed,\r\n                sunset,\r\n\r\n            }\r\n            setTempInfo(myNewWeatherInfo);\r\n\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getWeatherInfo();\r\n    }, [])\r\n    return (\r\n        <>\r\n        <div className=\"wrap\">\r\n            <div className=\"search\">\r\n                <input type=\"search\" placeholder=\"search..\"\r\n                 autoFocus id=\"search\" className=\"searchTerm\"\r\n                 value={searchValue}\r\n                onChange={(e)=>setSearchValue(e.target.value)} />\r\n                 <button type=\"button\" className=\"searchButton\"\r\n                 onClick={getWeatherInfo}>Search</button>\r\n            </div>\r\n        </div>\r\n        {/* our temp card */}\r\n        <WeatherCard tempInfo={tempInfo}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Temp\r\n","import React from 'react'\nimport Temp from './component/weather/Temp';\n\nconst App = () => {\n  return (\n    <>\n      <Temp />\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}